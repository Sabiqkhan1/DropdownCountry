{"version":3,"sources":["logo.svg","Components/Dropdown.js","api/BaseURL.js","api/Repository.js","Redux/Reducers/index.js","Components/Table.js","Dropdownapp.js","Redux/actionMethods/index.js","Redux/rootReducer.js","Redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["DropdownComp","list","onChange","label","e","target","value","class","aria-label","map","x","i","api","create","baseURL","repository","getCountries","data","a","get","IntialRegion","IntialCountries","TableComponent","selectedCountry","style","display","justifyContent","alignItems","flexDirection","className","name","capital","population","currencies","code","width","src","flag","DropdownApp","dispatch","useDispatch","Regions","useSelector","region","Countries","countries","React","useState","undefined","setselectedCountry","handleRegionChange","then","status","type","payload","handleCityChange","find","console","log","Dropdown","length","Table","rootReducer","combineReducers","state","action","store","createStore","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c4377c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\n\n// Functional component - takes two parameters , one is a list for either list of countries or list of regions \n// The second parameter is an onChange function that will handle the API - fetch \nconst DropdownComp = ({ list, onChange, label }) => {\n    return <>\n        <label>{label} </label>\n        <select onChange={(e) => onChange(e.target.value)} class=\"form-select mt-2 mb-2\" aria-label=\"Default select example\">\n            {\n                // Here I use the map function to render a new array of JSX \n                list.map((x, i) => <option value={x} key={i}>{x}</option>)\n            }\n        </select>\n    </>\n}\n\n\nexport default DropdownComp;\n\n\n\n","// API source is a library for handling restAPI\nimport { create } from 'apisauce'\n\n\n//create is an const exporting function - this funtion creates an API object which has CRUD funtions.\nexport const api = create({\n  baseURL: 'https://restcountries.eu/rest/v2/region/',\n})\n\n  //The main reason I have used api source instead of axios becuase we can create seperate repository file for API","import { api } from './BaseURL';\n\n\n// getCountries function this function will be valled when a region dropdown is chaanged and on change \n// The value of the elected dropdown will be passed as parameters as data. (which will be europe or asia)\nconst getCountries = async (data) => {\n    //concatinate the data with the Api\n    return await api.get('/' + data)\n}\n\n\nexport const repository = {\n    getCountries,\n}","\n\n// Array hardcoded of the initial region \nconst IntialRegion = [\"Europe\", \"Asia\"]\n// Initial countires set as empty array which will be populated depending on region \nconst IntialCountries = [];\n// This is simply returning state as it was hardcoded\nconst Regions = (state = IntialRegion, action) => {\n    return state\n}\n\nconst countries = (state = IntialCountries, action) => {\n    //If set countries is triggered or a regionHandle function is called it will set countries coming from the Api to this variable\n    if (action.type === \"setCountries\") {\n        return [...action.payload]\n    }\n    return state\n}\n\nexport { countries, Regions }","import React from 'react'\n\n\n\nconst TableComponent = ({ selectedCountry }) => {\n    return <>\n        <table style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }} className=\"table table-responsive m-auto \">\n\n\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Capital</th>\n                    <th>Population</th>\n                    <th>Currencies</th>\n                    <th>Flag</th>\n\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    <tr>\n                        {/** this infomation displays with the selected object values\n       * This is retrieved from the countires.find function \n       */}\n\n                        <td>{selectedCountry.name}</td>\n                        <td>{selectedCountry.capital}</td>\n                        <td>{selectedCountry.population}</td>\n                        <td>{selectedCountry.currencies.map(x => x.code)}</td>\n                        <td><img style={{ width: 26 }} src={selectedCountry.flag} /></td>\n                    </tr>\n                }\n            </tbody>\n            <tfoot></tfoot>\n            {/** if nothing is selected an empty fragment will be displayed  */}\n        </table>\n    </>\n}\n\n\nexport default TableComponent;\n\n\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react'\r\nimport Dropdown from \"./Components/Dropdown\"\r\nimport { repository } from './api/Repository'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setCountirestoRedux } from './Redux/actionMethods';\r\nimport { countries } from './Redux/Reducers';\r\nimport Table from \"./Components/Table\"\r\n\r\nfunction DropdownApp() {\r\n\r\n  // UseDispatch used to dispatch the action method - calling it when a region selected \r\n  // becuase countires will chnage depending on region selected\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // Once value is stored in redux - to data retireve useSelector is used \r\n  const Regions = useSelector(x => x.region);\r\n  const Countries = useSelector(x => x.countries);\r\n\r\n\r\n\r\n  // This use state is set to undefined, selected county will be represented in a table when selected by user\r\n  const [selectedCountry, setselectedCountry] = React.useState(undefined);\r\n\r\n  const handleRegionChange = async (value) => {\r\n    //When this function is triggered, API will call getCountries function which will return the JSON object from API and dispatching to reduc\r\n    //When API is called it will go into a promise state and it will stay in this state until it is resolved\r\n    // .then is used to take the resolved result \r\n    // if status = 200, this means the result is successfully retrieved\r\n    const { data, status } = await repository.getCountries(value).then(x => x);\r\n    if (status == 200) {\r\n\r\n      // Dispatching setcountriestoRedux allows to store the data into redux\r\n      dispatch(setCountirestoRedux(data))\r\n    }\r\n  }\r\n\r\n  const handleCityChange = async (value) => {\r\n    // the value is derived from the dropdown.js file depending on what is selected is passed here \r\n    // x the object of each countires. if object.name == value it will break loop and store value in the cont varibale selected country \r\n    const selectedCountry = Countries.find(x => x.name == value);\r\n    //now country has been selected this is stored in a selectedCountry state\r\n    setselectedCountry(selectedCountry);\r\n    console.log(selectedCountry);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Country Drowpdown</h1>\r\n      {/** When user selects value (either Europe or Asia) the handle region change is triggered */}\r\n      <Dropdown label=\"Region\" onChange={handleRegionChange} list={Regions} />\r\n      {/** if countries.length is 0 it means no region is selected. If no region is selected we do not render this drop down \r\n     * using a ternary operator depending on if this is tru it will return a drop down or an empty fragment\r\n     */}\r\n      <br></br>\r\n      {Countries.length > 0 ? <Dropdown label=\"Countries\" onChange={handleCityChange} list={Countries.map(x => x.name)} /> : <></>}\r\n      {/** \r\n     */}\r\n\r\n\r\n\r\n      {\r\n        // if country is selected this will render the following table \r\n        selectedCountry ? <Table selectedCountry={selectedCountry} /> : <></>\r\n      }\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default DropdownApp;\r\n"," const setCountirestoRedux=(payload)=>{\n    return {type:\"setCountries\",payload:payload}\n}\nexport {setCountirestoRedux}\n","import {combineReducers} from \"redux\";\nimport * as ReduxStates from './Reducers/';\nconst rootReducer = combineReducers({\n  region:ReduxStates.Regions,\n  countries:ReduxStates.countries,\n});\n\nexport {rootReducer};","import { createStore } from 'redux';\nimport { rootReducer } from './rootReducer';\n\n\n\n// Redux requires a store to be created - this is an empty container \n// We pass the rootReducer - this is becuase in another file I have made two seperate states one for country one for region \n// I have combined them using combineReducer this is provided by react Redux \nconst store = createStore(rootReducer);\nexport { store }\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport DropdownApp from \"./Dropdownapp\"\nimport { Provider } from \"react-redux\";\nimport { store } from './Redux/store'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// To use redux I have to wrap my aplication inside the provider. \n// Providor holds each detail \n// The providor needs a store which is a redux state \nfunction App() {\n\n\n  return (\n    <Provider store={store}>\n      <DropdownApp />\n    </Provider>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}